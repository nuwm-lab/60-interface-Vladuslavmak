using System;
using System.Globalization;

namespace EllipseTask
{
    // üîπ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏—Ö –æ–±‚Äô—î–∫—Ç—ñ–≤
    interface IShape
    {
        bool IsPointOnCurve(double x, double y);
        void DisplayInfo();
    }

    // üîπ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å: –∫—Ä–∏–≤–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
    abstract class QuadraticCurve : IShape
    {
        protected const double EPS = 1e-6;

        private double _a11, _a12, _a22, _b1, _b2, _c;

        // üî∏ –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
        public double A11 => _a11;
        public double A12 => _a12;
        public double A22 => _a22;
        public double B1 => _b1;
        public double B2 => _b2;
        public double C => _c;

        // üî∏ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        public QuadraticCurve(double a11, double a12, double a22, double b1, double b2, double c)
        {
            _a11 = a11;
            _a12 = a12;
            _a22 = a22;
            _b1 = b1;
            _b2 = b2;
            _c = c;
            Console.WriteLine("–°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±‚Äô—î–∫—Ç –∫–ª–∞—Å—É QuadraticCurve");
        }

        // üî∏ –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
        ~QuadraticCurve()
        {
            Console.WriteLine("–ó–≤—ñ–ª—å–Ω–µ–Ω–æ –æ–±‚Äô—î–∫—Ç QuadraticCurve");
        }

        // üî∏ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ (–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –¥–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó)
        public abstract bool IsPointOnCurve(double x, double y);

        public abstract void DisplayInfo();

        // üî∏ –ó–∞–≥–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥
        public virtual void DisplayCoefficients()
        {
            Console.WriteLine($"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏: a11={_a11}, a12={_a12}, a22={_a22}, b1={_b1}, b2={_b2}, c={_c}");
        }
    }

    // üîπ –ö–ª–∞—Å –µ–ª—ñ–ø—Å–∞
    class Ellipse : QuadraticCurve
    {
        private double _a, _b;

        public double A => _a;
        public double B => _b;

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        public Ellipse(double a, double b)
            : base(1 / (a * a), 0, 1 / (b * b), 0, 0, -1)
        {
            _a = a;
            _b = b;
            Console.WriteLine("–°—Ç–≤–æ—Ä–µ–Ω–æ –µ–ª—ñ–ø—Å");
        }

        // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
        ~Ellipse()
        {
            Console.WriteLine("–ó–Ω–∏—â–µ–Ω–æ –µ–ª—ñ–ø—Å");
        }

        public override bool IsPointOnCurve(double x, double y)
        {
            double value = (x * x) / (_a * _a) + (y * y) / (_b * _b);
            return Math.Abs(value - 1) < EPS;
        }

        public override void DisplayInfo()
        {
            Console.WriteLine($"\n–ï–ª—ñ–ø—Å: (x¬≤ / {_a * _a}) + (y¬≤ / {_b * _b}) = 1");
            base.DisplayCoefficients();
        }
    }

    // üîπ –ö–ª–∞—Å –≥—ñ–ø–µ—Ä–±–æ–ª–∏
    class Hyperbola : QuadraticCurve
    {
        private double _a, _b;

        public double A => _a;
        public double B => _b;

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        public Hyperbola(double a, double b)
            : base(1 / (a * a), 0, -1 / (b * b), 0, 0, -1)
        {
            _a = a;
            _b = b;
            Console.WriteLine("–°—Ç–≤–æ—Ä–µ–Ω–æ –≥—ñ–ø–µ—Ä–±–æ–ª—É");
        }

        // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
        ~Hyperbola()
        {
            Console.WriteLine("–ó–Ω–∏—â–µ–Ω–æ –≥—ñ–ø–µ—Ä–±–æ–ª—É");
        }

        public override bool IsPointOnCurve(double x, double y)
        {
            double value = (x * x) / (_a * _a) - (y * y) / (_b * _b);
            return Math.Abs(value - 1) < EPS;
        }

        public override void DisplayInfo()
        {
            Console.WriteLine($"\n–ì—ñ–ø–µ—Ä–±–æ–ª–∞: (x¬≤ / {_a * _a}) - (y¬≤ / {_b * _b}) = 1");
            base.DisplayCoefficients();
        }
    }

    // üîπ –û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
    class Program
    {
        static void Main()
        {
            Console.WriteLine("=== –ü–†–û–ì–†–ê–ú–ê: –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –∫–ª–∞—Å–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ ===");

            try
            {
                double a = ReadPositiveDouble("–í–≤–µ–¥—ñ—Ç—å a (–ø—ñ–≤–≤—ñ—Å—å –ø–æ –æ—Å—ñ X): ");
                double b = ReadPositiveDouble("–í–≤–µ–¥—ñ—Ç—å b (–ø—ñ–≤–≤—ñ—Å—å –ø–æ –æ—Å—ñ Y): ");

                // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                IShape[] shapes =
                {
                    new Ellipse(a, b),
                    new Hyperbola(a, b)
                };

                Console.WriteLine("\n–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–æ—á–∫–∏:");
                double x = ReadDouble("x = ");
                double y = ReadDouble("y = ");

                foreach (var shape in shapes)
                {
                    shape.DisplayInfo();
                    Console.WriteLine(shape.IsPointOnCurve(x, y)
                        ? $"–¢–æ—á–∫–∞ ({x}, {y}) –Ω–∞–ª–µ–∂–∏—Ç—å –∫—Ä–∏–≤—ñ–π."
                        : $"–¢–æ—á–∫–∞ ({x}, {y}) –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –∫—Ä–∏–≤—ñ–π.");
                    Console.WriteLine(new string('-', 60));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞: {ex.Message}");
            }

            Console.WriteLine("\n=== –ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ ===");
        }

        // üî∏ –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ
        static double ReadPositiveDouble(string message)
        {
            double value;
            do
            {
                Console.Write(message);
                if (double.TryParse(Console.ReadLine(), NumberStyles.Float, CultureInfo.InvariantCulture, out value) && value > 0)
                    return value;
                Console.WriteLine("–ü–æ–º–∏–ª–∫–∞: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ!");
            } while (true);
        }

        // üî∏ –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –±—É–¥—å-—è–∫–µ —á–∏—Å–ª–æ
        static double ReadDouble(string message)
        {
            double value;
            do
            {
                Console.Write(message);
                if (double.TryParse(Console.ReadLine(), NumberStyles.Float, CultureInfo.InvariantCulture, out value))
                    return value;
                Console.WriteLine("–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!");
            } while (true);
        }
    }
}
